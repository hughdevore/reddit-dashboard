{"version":3,"sources":["components/Article/Article.js","App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Footer","Header","Breadcrumb","Styled","div","Ups","span","Title","h1","ArticleContent","backgroundColor","borderRadius","padding","color","ArticleContentLayout","whiteSpace","ArticleFooter","paddingTop","CommentContent","listStyleType","ChildCommentContent","borderLeft","InfoPoints","InfoTime","CommentInfoContent","comment","created_utc","ups","style","paddingLeft","display","moment","unix","fromNow","CommentAuthor","author","textDecoration","href","CompiledComment","body","children","id","nestedComments","map","key","datetime","content","actions","icon","faTrash","console","log","Article","props","article","comments","selftext","subreddit","title","commentsLength","length","commentRoot","commentMap","forEach","parent_id","push","parentCommentIndex","findIndex","faCommentAlt","loading","isLoading","App","state","fetch","response","json","this","setState","fetchArticle","then","setTimeout","catch","err","boxShadow","fontFamily","active","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.42230bc9.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport moment from 'moment';\nimport { Comment, DeleteFilled, Layout, PageHeader, Skeleton } from 'antd';\nimport Styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCommentAlt, faTrash} from '@fortawesome/free-solid-svg-icons'\n\nconst { Content, Footer, Header } = Layout;\n\nconst Breadcrumb = Styled.div`\n  color: rgb(109.0, 109.0, 109.0);\n  letter-spacing: 1px;\n`;\n\nconst Ups = Styled.span`\n  display: inline-block;\n  margin-right: 2em;\n`;\n\nconst Title = Styled.h1`\n  display: inline-block;\n  font-size: 2em;\n  font-weight: 500;\n  margin: 20px 0;\n  color: rgb(44.0, 44.0, 44.0);\n`;\n\nconst ArticleContent = {\n  backgroundColor: 'white',\n  borderRadius: '15px',\n  padding: '2em',\n  color: 'rgb(98, 98, 98)'\n}\n\nconst ArticleContentLayout = {\n  backgroundColor: 'rgb(241.0, 241.0, 241.0)',\n  borderRadius: '15px',\n  padding: '2em 4em',\n  whiteSpace: 'pre-line'\n}\n\nconst ArticleFooter = {\n  paddingTop: '1em'\n}\n\nconst CommentContent = {\n  padding: '1em',\n  listStyleType: 'none'\n}\n\nconst ChildCommentContent = {\n  padding: '1em',\n  borderLeft: '2px solid rgb(239, 239, 239)',\n  listStyleType: 'none'\n}\n\nconst InfoPoints = Styled.span`\n  display: inline-block;\n  padding: 0 0 .5em 0;\n`;\n\nconst InfoTime = Styled.span`\n  display: inline-block;\n  padding: 0 0 .5em 0;\n`;\n\n/**\n * @TODO: Add Doc Blocks to functions and code.\n * @TODO: Add Delete functionality to comments.\n */\n\n\nfunction CommentInfoContent(comment) {\n  const { created_utc, ups } = comment;\n  return (\n    <div style={{paddingLeft: '1em', display: 'inline-block', color: 'rgb(36, 36, 36)'}}>\n      <InfoPoints>{1 === ups ? ups+' point' : ups+' points'}</InfoPoints>\n      <span style={{padding: '0 .5em'}}>-</span>\n      <InfoTime>{moment.unix(created_utc).fromNow()}</InfoTime>\n    </div>\n  )\n}\n\nfunction CommentAuthor(author) {\n  return (\n    <a style={{textDecoration: 'none'}} href={'https://www.reddit.com/user/' + author}>{author}</a>\n  );\n}\n\nfunction CompiledComment({ comment }) {\n  const { author, body, children, id } = comment;\n  \n  const nestedComments = (children || []).map(comment => {\n    return (\n      <Comment \n        key={id}\n        author={CommentAuthor(author)}\n        datetime={CommentInfoContent(comment)}\n        content={<span style={{padding: '.5em 0 1em 0', display: 'inline-block'}}>{comment.body}</span>}\n        style={ChildCommentContent}\n        actions={[<span key={comment.id}><FontAwesomeIcon icon={faTrash} style={{padding: '0 .75em 0 0'}}/></span>]}\n      />\n    );\n  })\n\n  console.log(nestedComments);\n\n  return (\n    <Fragment>\n      <Comment \n        key={id}\n        author={CommentAuthor(author)}\n        datetime={CommentInfoContent(comment)}\n        content={<span style={{padding: '.5em 0 1em 0', display: 'inline-block'}}>{body}</span>}\n        style={CommentContent}\n        actions={[<span key={comment.id}><FontAwesomeIcon icon={faTrash} style={{padding: '0 .75em 0 0', listStyleType: 'none'}}/></span>]}\n      >\n      {nestedComments}\n      </Comment>\n    </Fragment>\n  );\n}\n\nfunction Article(props) {\n    const { comments, selftext, subreddit, title, ups } = props.article;\n    const commentsLength = comments ? comments.length : 0;\n\n    let commentRoot = [];\n    let commentMap = {};\n\n    if ( comments && comments.length ) {\n      comments.forEach(comment => {        \n        const { parent_id } = comment;\n        // If the comment doesn't have the 'parent_id' field add it the top level of commentMap.\n        if (!parent_id) return commentRoot.push(comment);\n\n        // Add the comment as a child to it's parent using the 'parent_id' field.\n        let parentCommentIndex = commentMap[parent_id];\n        if(typeof parentCommentIndex !== \"number\" ) {\n          parentCommentIndex = comments.findIndex(comment => comment.id === parent_id);\n          commentMap[parent_id] = parentCommentIndex;\n        }\n        if ( commentRoot[parentCommentIndex] ) {\n          if ( !commentRoot[parentCommentIndex].children) {\n            return commentRoot[parentCommentIndex].children = [comment]\n          }\n          commentRoot[parentCommentIndex].children.push(comment)\n        }\n      });\n    }\n\n\n    return (\n      <Fragment>\n        <Layout>\n          <Header>\n            <PageHeader>\n              <Breadcrumb>r/{subreddit}</Breadcrumb>\n              <Fragment>\n                <Ups>{ups/1000}k</Ups>\n                <Title>{title}</Title>\n              </Fragment>\n            </PageHeader>\n          </Header>\n          <Content style={ArticleContent}>\n            <Layout style={ArticleContentLayout}>\n              <Content >\n                {selftext}\n              </Content>\n              <Footer style={ArticleFooter}>\n                <FontAwesomeIcon icon={faCommentAlt} style={{padding: '0 .75em 0 0'}}/>\n                {comments ? commentsLength : 0} Comments\n              </Footer>\n            </Layout>\n            <Layout style={{paddingTop: '2em', display: 'inline-block'}}>\n              <Content>\n                {commentRoot && commentRoot.length ? commentRoot.map(comment => {\n                  return (\n                    <CompiledComment key={comment.id} comment={comment} />\n                  );\n                }) : \n                  <Skeleton loading={props.isLoading} />\n                }\n              </Content>\n            </Layout>\n          </Content>\n        </Layout>\n      </Fragment>\n      \n    );\n}\n\n\nexport default Article;","import React, { Component, Fragment } from 'react';\nimport { Layout, Skeleton } from 'antd';\nimport Article from './components/Article/Article';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      article: {},\n      isLoading: false,\n    };\n  }\n\n  async fetchArticle() {\n    let response = await fetch('https://gist.githubusercontent.com/mkg0/6a4dca9067ad7a296204e7c9ecd977b0/raw/0b1ec16580ea1e970a73f5c85563c22631be7ad7/unpopularopinion-dataset.json');\n    return response.json();\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n  \n    // Fetch the data for the article and comments.\n    this.fetchArticle()\n    .then(article => {\n      setTimeout( () => {\n        console.log(article);\n        this.setState({ article, isLoading: false })\n      }, 750 );\n\n    })\n    .catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  render() {\n    const { article, isLoading } = this.state;\n    return (\n      <Fragment>\n        <Layout\n          style={{\n            backgroundColor: 'rgb(222, 228, 234)',\n            padding: '7em 10em',\n          }}\n        >\n          <Layout\n            style={{\n              backgroundColor: 'rgb(249, 249, 249)',\n              padding: '3em 6em',\n              borderRadius: '15px',\n              boxShadow: '0 0 10px gray',\n              fontFamily: 'verdana'\n            }}\n          >\n            <Skeleton active={true} loading={isLoading}>\n              <Article article={article} />\n            </Skeleton>\n          </Layout>\n        </Layout>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n/**\n * Don't register the service worker for this app yet since\n * it's still in development.\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}